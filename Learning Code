CSS - Linear Gradient with semi-transparent borders

.box{box-sizing:border-box; height: 100px; width:
100px; width: 
100px; border:
25px solid rgba(0,0,0,0.1);
background-color:#eee;
background-image:
linear-gradient(to bottom,rgba(255,255,255,0.1), 0%, rgba(0,0,0,0.1) 100%); 
margin-bottom: 20px;}

{--! comment--!}

http://www.google.com/fonts/

https://fonts.google.com/specimen/Londrina+Shadow?query=Londrina+Shadow

If we had set the background image's size to a fixed number or percent, it would scale poorly on smaller screens. try this: click the desktop-to-mobile- swtich in the top-right of your preview window.
Notice that the size of the image itself won't change the size of the real estate it occupiesIf onscreen.

If you change the div's background-size to 100% you'll also notice that the image duplications. It will stack vertically as the horizontal width gets smaller,
because it's trying to maintain both its proportion and its fixed height of 200px. This is why it's best not to assign images specific
width and height with CSS.

There may be times when it's more important to have the full image remain ont he screen (and we'll go over how to make that happen 
in future projects), but in this case, it's more important that the details of the image stay visible at full scale

But why does the media query need to go at the end of the regular styles?
Browsers read CSS from top to bottom. When you give it a command that conflicts with something you told it previously, it forgets the old style
and runs with the new one...

Unless the browser can't understand the new comman, in which case, it ignores it. That's why it was important to put the solid backup background color before the gradients.

A newer browser reads "now I give it a solid black background, then now I give it a gradient background."
An older browser hears "now I give it a soolid black background, then blah blah blah blah blah."

Border Radius - You can use border radius to create circles, ovals, bullet or egg shapes; pretty much anything with some curve to it.
Margin, Padding          Border-Radius

1st                       1st
2nd                       2nd
3rd                       3rd
4th                       4th

But, when you wanted all four sides of an element ot have the same padding or margin, you only have to decalre that pixel value once. The same shortcut works when all four radii will have the same value.
And, if you give all four corners the exact same border-radius, you will get a circle.

Giving .foot a border-radius of 40px works, but it only needs to be 20px. Anything less than half the size will look squarish rather than the round, any more is overkill.

The Z axis goes from back to front, just as Y goes from top to bottom, and X goes from left to right.

All this time, we've been in  flat land where z=zero.

Z-Index
- the default value for z-index, when you don't declare any z-index, is 0. If you want something to go behind your main working layer, give it a negative value. If you want it in front, give it a number greater than zero.

Remember the Cascade!
CSS is short for Cascading Style Sheets. The <style>s cascade down from the outermost containers to the inner ones.
So if we create an outer HTML element that contains all of the robot pieces.

But wait - there's more
transform is not a one-trick pony. It's got loads of tricks up it sleeves. The next one we're going to use is called scaleY. This finds the center of the element, and flips it along the Y axis.



And if we wrote some CSS for that container element, those styles should affect every HTML element inside the container. 

The letter j.
The letter j's Y-Axis
The letter j flipped on its Y axis.

Keyframing is an animation term dating back to when every single frame of a cartoon was drawn by hand.
The animators only worked on the most important frames, and the in-between frames were drawn by assistants. Now, in-betweening is done by computers.

Rememeber that Jquery is a library full of helpful Javascript. Instead of writing functions from scratch, you can write the names of commonly used functions that already exist in the library. 
There's a function in the jQuery library called toggleClass. So let's use that!

From a design perspective, the syntax for JQuery is: "when I do this, make the CSS do this.
The more common slogan is:
Find something, do something.
Chris Coyler.

$('.flash').click(function(){
$('.brain').toggleClass('laser');
});

0 0 0 black    255 255 255  white
255 0 0 red    0 255 255    cyan
0 255 0 green  255 0 255    magenta
0 0 255 blue   255 255 0    yellow

It works like this: Math.random creates a random number between 0 and 1.
0 x 255 = 0
1 x 255 = 255
Multiply that random number by 255 you get a random number between 0 and 255.

Math.floor is a clever bit of Javascript that rounds any value down* to a whole number.

0.5 x 255 = 127.5          0.831 x 255 = 211.905
Math.floor (127.5) = 127    Math.floor(211.905) = 211

This gives you useful numbers (with no decimals) for red, green and blue values.
Now you can generate random whole numbers between 0 and 255 to make RGB values from! That's step one. Step two:make javascript remember those numbers.
Javascript gives you something called a variable. Variables slurp up values, including numbers, and hold onto them.
Variables always have names.

*/
Making variables is pretty easy. You create by giving them names, then tell them what you want them to remember.
/*


